<?php namespace EventSourcing\Testing;

use EventSourcing\Domain\AggregateRoot;
use EventSourcing\EventStore\EventStoreRepository;
use EventSourcing\Exceptions\AggregateClassNotFoundException;
use Exception;

trait Specification
{
    /**
     * If an exception is thrown, it will be caught in here
     */
    protected $caughtException;

    /**
     * The events generated by the command
     *
     * @var array
     */
    protected $producedEvents = [];

    /**
     * Current state
     *
     * @var
     */
    protected $aggregate;

    /**
     * Given events to build the aggregate
     *
     * @return array
     */
    abstract public function given();

    /**
     * Command to fire
     *
     * @return Command
     */
    abstract public function when();

    /**
     * The command handler
     *
     * @param $repository
     * @return mixed
     */
    abstract public function handler($repository);

    /**
     * Setup
     */
    public function setUp()
    {
        if (is_callable('parent::setUp')) {
            parent::setUp();
        }

        try {
            $events = $this->given();

            $fakeRepository = new FakeRepository($events);

            $this->handler($fakeRepository)->handle($this->when());

            $this->producedEvents = $fakeRepository->produced;
            $this->aggregate = $fakeRepository->aggregate;
        } catch (Exception $e) {
            $this->caughtException = $e;
        }
    }

    /**
     * @param Exception $exception
     */
    protected function throws(Exception $exception)
    {
        $this->assertInstanceOf(get_class($exception), $this->caughtException);
    }
}

class FakeRepository implements EventStoreRepository
{
    /**
     * @var
     */
    public $aggregate;

    /**
     * @var
     */
    public $previousEvents;

    /**
     * @var
     */
    public $produced;

    /**
     * @var
     */
    public $aggregateClass;

    /**
     * @param $events
     */
    public function __construct($events)
    {
        $this->previousEvents = $events;
    }

    /**
     * @param $class
     * @return mixed
     */
    public function setAggregateClass($class)
    {
        $this->aggregateClass = $class;
    }

    /**
     * @param $id
     * @return mixed
     * @throws AggregateClassNotFoundException
     */
    public function load($id)
    {
        $subject = $this->aggregateClass;

        if (! $subject) {
            throw new AggregateClassNotFoundException();
        }

        return $subject::replayEvents($this->previousEvents);
    }

    /**
     * @param AggregateRoot $aggregate
     * @return void
     */
    public function save(AggregateRoot $aggregate)
    {
        $this->produced = $aggregate->releaseEvents();

        foreach ($this->produced as $event) {
            $aggregate->applyAnEvent($event);
        }

        $this->aggregate = $aggregate;
    }
}
